[build-system]
requires = ["setuptools>=65.4.1", "setuptools_scm[toml]>=7"]
build-backend = "setuptools.build_meta"

[project]
name = "iqm-client"
dynamic = ["version", "dependencies", "optional-dependencies"]
description = "Client library for accessing an IQM quantum computer"
authors = [{name="IQM Finland Oy", email="developers@meetiqm.com"}]
readme = "README.rst"
license = {file="LICENSE.txt"}
classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Scientific/Engineering :: Physics",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
]
requires-python = ">=3.9, <3.13"
[project.urls]
Homepage = "https://github.com/iqm-finland/iqm-client"
Documentation = "https://iqm-finland.github.io/iqm-client"

[tool.setuptools.dynamic.dependencies]
file = "requirements/base.in"

[tool.setuptools.dynamic.optional-dependencies.testing]
file = "requirements/testing.in"

[tool.setuptools.dynamic.optional-dependencies.docs]
file = "requirements/docs.in"

[tool.setuptools.dynamic.optional-dependencies.dev]
file = "requirements/dev.in"

[tool.setuptools.dynamic.optional-dependencies.lock]
file = "requirements/lock.txt"

[tool.setuptools_scm]
# See configuration details in https://github.com/pypa/setuptools_scm
version_scheme = "no-guess-dev"


[tool.black]
line-length = 120
skip-string-normalization = true
target-version = ["py311"]
extend-exclude = "_pb2.py$"


[tool.coverage.run]
branch = true
source = ["iqm"]

[tool.coverage.paths]
source = [
    "src/",
    "*/site-packages/",
]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",

    # Don't complain about missing debug-only code:
    "def __repr__",
    'if self\.debug',

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",
]


[tool.isort]
# make isort and black compatible
profile = "black"
line_length = 120
balanced_wrapping = true
force_sort_within_sections = true
reverse_relative = true
group_by_package = true
known_first_party = ["iqm"]


[tool.mypy]
ignore_missing_imports = true
namespace_packages = true
explicit_package_bases = true
mypy_path = "src"
plugins = ["pydantic.mypy"]

[[tool.mypy.overrides]]
module = ["requests"]
ignore_missing_imports = true


[tool.pylint.main]
disable = [
    "protected-access",
    "too-few-public-methods",
    "too-many-arguments",
    "invalid-name",
    "abstract-method",
    "fixme",
]
load-plugins = ["pylint_pydantic"]
extension-pkg-whitelist = ["pydantic"]

[tool.pylint.format]
# Maximum number of characters on a single line.
max-line-length = 120

[tool.pylint.similarities]
ignore-imports = true

[tool.pylint.string]
# This flag controls whether inconsistent-quotes generates a warning when the
# character used as a quote delimiter is used inconsistently within a module.
check-quote-consistency = true
